<?xml version="1.0" encoding="utf-8"?>
<testsuite errors="0" failures="2" name="pytest" skipped="0" tests="7" time="772.248">
    <testcase classname="test_dir.test_crm_cust_manger.TestLogin" file="test_dir/test_crm_cust_manger.py" line="438"
              name="test_login" time="14.318"></testcase>
    <testcase classname="test_dir.test_crm_cust_manger.TestCustomerAdd" file="test_dir/test_crm_cust_manger.py"
              line="458" name="test_add_customer" time="19.983"></testcase>
    <testcase classname="test_dir.test_crm_cust_manger.TestCustomerAdd" file="test_dir/test_crm_cust_manger.py"
              line="478" name="test_split_customer" time="28.291"></testcase>
    <testcase classname="test_dir.test_crm_cust_manger.TestCustomerAdd" file="test_dir/test_crm_cust_manger.py"
              line="504" name="test_convert_student" time="29.668"></testcase>
    <testcase classname="test_dir.test_crm_cust_manger.TestCustomerAdd" file="test_dir/test_crm_cust_manger.py"
              line="527" name="test_create_account" time="169.845">
        <failure message="AssertionError: assert &apos;&apos; == &apos;客户550&apos;
  + 客户550">self = &lt;test_dir.test_crm_cust_manger.TestCustomerAdd object at 0x115783410&gt;
            browser1 = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session=&quot;16d64c6c45b31f2e62a71ef550b677cd&quot;)&gt;
            pass_word = &apos;123456&apos;, school_name = &apos;高分云&apos;, crm_url = &apos;http://gaofenyun.com:8073/crm-web/login.html&apos;
            adviser_account = &apos;高分云辅导1&apos;, counseling_supervision_account = &apos;高分云辅导督导1&apos;
            phone_number = &apos;13437829328&apos;

            def test_create_account(self, browser1, pass_word, school_name, crm_url, adviser_account,
            counseling_supervision_account, phone_number):
            &quot;&quot;&quot;
            测试单个客户转为学员
            :param browser1:
            :param pass_word:
            :param school_name:
            :param crm_url:
            :param adviser_account:
            :param counseling_supervision_account:
            :param phone_number:
            :return:
            &quot;&quot;&quot;
            page = GfyCrmCustomerManagement(browser1)
            account_name = new_student_name()
            login(crm_url, browser1, counseling_supervision_account, pass_word)
            add_customer(browser1, account_name, phone_number)
            sleep(1)
            split_customer(browser1, adviser_account, school_name)
            sleep(1)
            convert_student(browser1, school_name)
            sleep(1)
            page.customer_ok_button.click()
            sleep(1)
            create_account(browser1, pass_word, school_name)
            sleep(1)
            &gt; assert page.customer_create_account_save_status.text == account_name
            E AssertionError: assert &apos;&apos; == &apos;客户550&apos;
            E + 客户550

            test_dir/test_crm_cust_manger.py:554: AssertionError
        </failure>
    </testcase>
    <testcase classname="test_dir.test_crm_cust_manger.TestCustomerAdd" file="test_dir/test_crm_cust_manger.py"
              line="555" name="test_customer_recovery" time="178.248">
        <failure
                message="selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element &lt;span style=&quot;border: 2px solid red;&quot;&gt;...&lt;/span&gt; is not clickable at point (657, 352). Other element would receive the click: &lt;div class=&quot;bootbox modal fade in&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; style=&quot;z-index: 1070; display: block; padding-right: 4px;&quot;&gt;...&lt;/div&gt;
  (Session info: chrome=79.0.3945.79)">self = &lt;test_dir.test_crm_cust_manger.TestCustomerAdd object at 0x115914050&gt;
            crm_url = &apos;http://gaofenyun.com:8073/crm-web/login.html&apos;
            browser1 = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session=&quot;16d64c6c45b31f2e62a71ef550b677cd&quot;)&gt;
            counseling_supervision_account = &apos;高分云辅导督导1&apos;, pass_word = &apos;123456&apos;, phone_number = &apos;13437829328&apos;
            adviser_account = &apos;高分云辅导1&apos;, school_name = &apos;高分云&apos;, adviser_account2 = &apos;高分云辅导2&apos;,
            adviser_name2 = &apos;辅导2&apos;

            def test_customer_recovery(self, crm_url, browser1, counseling_supervision_account, pass_word, phone_number,
            adviser_account, school_name, adviser_account2, adviser_name2):
            &quot;&quot;&quot;
            测试二手单回收再分单
            :param crm_url:
            :param browser1:
            :param counseling_supervision_account:
            :param pass_word:
            :param phone_number:
            :param adviser_account:
            :param school_name:
            :param adviser_account2:
            :param adviser_name2:
            :return:
            &quot;&quot;&quot;
            page = GfyCrmCustomerManagement(browser1)
            login(crm_url, browser1, counseling_supervision_account, pass_word)
            add_customer(browser1, new_student_name(), phone_number)
            sleep(1)
            # 第一个跟进人分单
            split_customer(browser1, adviser_account, school_name)
            # 分单完成等待刷新
            sleep(1)
            first_customer_teacher_name = customer_recovery(browser1)
            # 等待&quot;保存成功&quot;提示
            PageWait(page.customer_recovery_status)
            assert page.customer_recovery_status.text == &quot;保存成功&quot;
            sleep(1)
            page.customer_recovery_date_button.click()
            sleep(1)
            page.customer_recovery_teacher_button.click()
            sleep(1)
            assert page.customer_recovery_date[0].text != &quot;--&quot;
            assert page.customer_recovery_teacher[0].text == first_customer_teacher_name
            sleep(1)
            # 二手单分单
            split_customer(browser1, adviser_account2, school_name)
            sleep(1)
            &gt; page.checkbox_split_count.click()

            test_dir/test_crm_cust_manger.py:594:
            _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
            /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/selenium/webdriver/remote/webelement.py:80:
            in click
            self._execute(Command.CLICK_ELEMENT)
            /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/selenium/webdriver/remote/webelement.py:633:
            in _execute
            return self._parent.execute(command, params)
            /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py:321:
            in execute
            self.error_handler.check_response(response)
            _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

            self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x114fced50&gt;
            response = {&apos;status&apos;: 400, &apos;value&apos;: &apos;{&quot;value&quot;:{&quot;error&quot;:&quot;element
            click intercepted&quot;,&quot;message&quot;:&quot;element click intercepted: Element ...fff72522e65
            _pthread_start + 148\\n24 libsystem_pthread.dylib 0x00007fff7251e83b thread_start + 15\\n&quot;}}&apos;}

            def check_response(self, response):
            &quot;&quot;&quot;
            Checks that a JSON response from the WebDriver does not have an error.

            :Args:
            - response - The JSON response from the WebDriver server as a dictionary
            object.

            :Raises: If the response contains an error message.
            &quot;&quot;&quot;
            status = response.get(&apos;status&apos;, None)
            if status is None or status == ErrorCode.SUCCESS:
            return
            value = None
            message = response.get(&quot;message&quot;, &quot;&quot;)
            screen = response.get(&quot;screen&quot;, &quot;&quot;)
            stacktrace = None
            if isinstance(status, int):
            value_json = response.get(&apos;value&apos;, None)
            if value_json and isinstance(value_json, basestring):
            import json
            try:
            value = json.loads(value_json)
            if len(value.keys()) == 1:
            value = value[&apos;value&apos;]
            status = value.get(&apos;error&apos;, None)
            if status is None:
            status = value[&quot;status&quot;]
            message = value[&quot;value&quot;]
            if not isinstance(message, basestring):
            value = message
            message = message.get(&apos;message&apos;)
            else:
            message = value.get(&apos;message&apos;, None)
            except ValueError:
            pass

            exception_class = ErrorInResponseException
            if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
            elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
            elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
            elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
            elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
            elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
            elif status in ErrorCode.INVALID_SELECTOR \
            or status in ErrorCode.INVALID_XPATH_SELECTOR \
            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
            elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
            elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
            elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
            elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
            elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
            elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
            elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
            elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
            elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
            elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
            elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
            elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
            elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
            elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
            elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
            elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
            elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
            elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
            elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
            elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
            elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
            elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
            else:
            exception_class = WebDriverException
            if value == &apos;&apos; or value is None:
            value = response[&apos;value&apos;]
            if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
            raise exception_class(response, value)
            raise exception_class(value)
            if message == &quot;&quot; and &apos;message&apos; in value:
            message = value[&apos;message&apos;]

            screen = None
            if &apos;screen&apos; in value:
            screen = value[&apos;screen&apos;]

            stacktrace = None
            if &apos;stackTrace&apos; in value and value[&apos;stackTrace&apos;]:
            stacktrace = []
            try:
            for frame in value[&apos;stackTrace&apos;]:
            line = self._value_or_default(frame, &apos;lineNumber&apos;, &apos;&apos;)
            file = self._value_or_default(frame, &apos;fileName&apos;, &apos;&lt;anonymous&gt;&apos;)
            if line:
            file = &quot;%s:%s&quot; % (file, line)
            meth = self._value_or_default(frame, &apos;methodName&apos;, &apos;&lt;anonymous&gt;&apos;)
            if &apos;className&apos; in frame:
            meth = &quot;%s.%s&quot; % (frame[&apos;className&apos;], meth)
            msg = &quot; at %s (%s)&quot;
            msg = msg % (meth, file)
            stacktrace.append(msg)
            except TypeError:
            pass
            if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
            elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if &apos;data&apos; in value:
            alert_text = value[&apos;data&apos;].get(&apos;text&apos;)
            elif &apos;alert&apos; in value:
            alert_text = value[&apos;alert&apos;].get(&apos;text&apos;)
            raise exception_class(message, screen, stacktrace, alert_text)
            &gt; raise exception_class(message, screen, stacktrace)
            E selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element
            &lt;span style=&quot;border: 2px solid red;&quot;&gt;...&lt;/span&gt; is not clickable at point (657, 352).
            Other element would receive the click: &lt;div class=&quot;bootbox modal fade in&quot; tabindex=&quot;-1&quot;
            role=&quot;dialog&quot; style=&quot;z-index: 1070; display: block; padding-right: 4px;&quot;&gt;...&lt;/div&gt;
            E (Session info: chrome=79.0.3945.79)

            /Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/site-packages/selenium/webdriver/remote/errorhandler.py:242:
            ElementClickInterceptedException
        </failure>
    </testcase>
    <testcase classname="test_dir.test_crm_cust_manger.TestCustomerAddOrder" file="test_dir/test_crm_cust_manger.py"
              line="606" name="test_add_new_order" time="48.278"></testcase>
    <testcase time="264.525"></testcase>
</testsuite>