<?xml version="1.0" encoding="utf-8"?><testsuite errors="1" failures="1" name="pytest" skipped="0" tests="8" time="131.745"><testcase classname="test_dir.test_crm_cust_manger.TestCustomerAdd" file="test_dir/test_crm_cust_manger.py" line="308" name="test_login" time="11.582"></testcase><testcase classname="test_dir.test_crm_cust_manger.TestCustomerAdd" file="test_dir/test_crm_cust_manger.py" line="322" name="test_add_customer" time="10.859"></testcase><testcase classname="test_dir.test_crm_cust_manger.TestCustomerAdd" file="test_dir/test_crm_cust_manger.py" line="388" name="test_split_customer" time="5.466"></testcase><testcase classname="test_dir.test_crm_cust_manger.TestCustomerAdd" file="test_dir/test_crm_cust_manger.py" line="402" name="test_convert_student" time="4.357"></testcase><testcase classname="test_dir.test_crm_cust_manger.TestCustomerAdd" file="test_dir/test_crm_cust_manger.py" line="415" name="test_create_account" time="22.007"><failure message="selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable
  (Session info: chrome=76.0.3809.100)">self = &lt;test_dir.test_crm_cust_manger.TestCustomerAdd object at 0x105aa0f90&gt;
browser1 = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session=&quot;dd10096d9162484ab438258f5598400f&quot;)&gt;
pass_word = &apos;123456&apos;, customer_birthday = &apos;1991/10/25&apos;

    def test_create_account(self, browser1, pass_word, customer_birthday):
        &quot;&quot;&quot;
        测试创建客户教学账号
        :param browser1:
        :param pass_word:
        :return:
        &quot;&quot;&quot;
&gt;       create_account(browser1, pass_word, customer_birthday)

test_dir/test_crm_cust_manger.py:423: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
test_dir/test_crm_cust_manger.py:110: in create_account
    page.first_student_name.click()
../../venv/lib/python3.7/site-packages/selenium/webdriver/remote/webelement.py:80: in click
    self._execute(Command.CLICK_ELEMENT)
../../venv/lib/python3.7/site-packages/selenium/webdriver/remote/webelement.py:633: in _execute
    return self._parent.execute(command, params)
../../venv/lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x104c5fbd0&gt;
response = {&apos;status&apos;: 400, &apos;value&apos;: &apos;{&quot;value&quot;:{&quot;error&quot;:&quot;element not interactable&quot;,&quot;message&quot;:&quot;element not interactable\\n  (Sessio...7fff78082249 _pthread_start + 66\\n22  libsystem_pthread.dylib             0x00007fff7807e40d thread_start + 13\\n&quot;}}&apos;}

    def check_response(self, response):
        &quot;&quot;&quot;
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        &quot;&quot;&quot;
        status = response.get(&apos;status&apos;, None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get(&quot;message&quot;, &quot;&quot;)
        screen = response.get(&quot;screen&quot;, &quot;&quot;)
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get(&apos;value&apos;, None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value[&apos;value&apos;]
                    status = value.get(&apos;error&apos;, None)
                    if status is None:
                        status = value[&quot;status&quot;]
                        message = value[&quot;value&quot;]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get(&apos;message&apos;)
                    else:
                        message = value.get(&apos;message&apos;, None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == &apos;&apos; or value is None:
            value = response[&apos;value&apos;]
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == &quot;&quot; and &apos;message&apos; in value:
            message = value[&apos;message&apos;]
    
        screen = None
        if &apos;screen&apos; in value:
            screen = value[&apos;screen&apos;]
    
        stacktrace = None
        if &apos;stackTrace&apos; in value and value[&apos;stackTrace&apos;]:
            stacktrace = []
            try:
                for frame in value[&apos;stackTrace&apos;]:
                    line = self._value_or_default(frame, &apos;lineNumber&apos;, &apos;&apos;)
                    file = self._value_or_default(frame, &apos;fileName&apos;, &apos;&lt;anonymous&gt;&apos;)
                    if line:
                        file = &quot;%s:%s&quot; % (file, line)
                    meth = self._value_or_default(frame, &apos;methodName&apos;, &apos;&lt;anonymous&gt;&apos;)
                    if &apos;className&apos; in frame:
                        meth = &quot;%s.%s&quot; % (frame[&apos;className&apos;], meth)
                    msg = &quot;    at %s (%s)&quot;
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if &apos;data&apos; in value:
                alert_text = value[&apos;data&apos;].get(&apos;text&apos;)
            elif &apos;alert&apos; in value:
                alert_text = value[&apos;alert&apos;].get(&apos;text&apos;)
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable
E         (Session info: chrome=76.0.3809.100)

../../venv/lib/python3.7/site-packages/selenium/webdriver/remote/errorhandler.py:242: ElementNotInteractableException</failure></testcase><testcase classname="test_dir.test_crm_cust_manger.TestCustomerAddOrder" file="test_dir/test_crm_cust_manger.py" line="509" name="test_add_new_order" time="39.499"></testcase><testcase classname="test_dir.test_crm_cust_manger.TestCustomerAddOrder" file="test_dir/test_crm_cust_manger.py" line="529" name="test_pay_new_order" time="20.792"></testcase><testcase classname="pytest" name="internal" time="0.000"><error message="internal error">Traceback (most recent call last):
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/_pytest/main.py&quot;, line 213, in wrap_session
    session.exitstatus = doit(config, session) or 0
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/_pytest/main.py&quot;, line 257, in _main
    config.hook.pytest_runtestloop(session=session)
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/pluggy/hooks.py&quot;, line 289, in __call__
    return self._hookexec(self, self.get_hookimpls(), kwargs)
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/pluggy/manager.py&quot;, line 87, in _hookexec
    return self._inner_hookexec(hook, methods, kwargs)
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/pluggy/manager.py&quot;, line 81, in &lt;lambda&gt;
    firstresult=hook.spec.opts.get(&quot;firstresult&quot;) if hook.spec else False,
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/pluggy/callers.py&quot;, line 208, in _multicall
    return outcome.get_result()
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/pluggy/callers.py&quot;, line 80, in get_result
    raise ex[1].with_traceback(ex[2])
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/pluggy/callers.py&quot;, line 187, in _multicall
    res = hook_impl.function(*args)
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/_pytest/main.py&quot;, line 278, in pytest_runtestloop
    item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/pluggy/hooks.py&quot;, line 289, in __call__
    return self._hookexec(self, self.get_hookimpls(), kwargs)
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/pluggy/manager.py&quot;, line 87, in _hookexec
    return self._inner_hookexec(hook, methods, kwargs)
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/pluggy/manager.py&quot;, line 81, in &lt;lambda&gt;
    firstresult=hook.spec.opts.get(&quot;firstresult&quot;) if hook.spec else False,
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/pluggy/callers.py&quot;, line 208, in _multicall
    return outcome.get_result()
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/pluggy/callers.py&quot;, line 80, in get_result
    raise ex[1].with_traceback(ex[2])
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/pluggy/callers.py&quot;, line 187, in _multicall
    res = hook_impl.function(*args)
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/pytest_rerunfailures.py&quot;, line 176, in pytest_runtest_protocol
    reports = runtestprotocol(item, nextitem=nextitem, log=False)
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/_pytest/runner.py&quot;, line 87, in runtestprotocol
    reports.append(call_and_report(item, &quot;call&quot;, log))
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/_pytest/runner.py&quot;, line 169, in call_and_report
    report = hook.pytest_runtest_makereport(item=item, call=call)
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/pluggy/hooks.py&quot;, line 289, in __call__
    return self._hookexec(self, self.get_hookimpls(), kwargs)
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/pluggy/manager.py&quot;, line 87, in _hookexec
    return self._inner_hookexec(hook, methods, kwargs)
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/pluggy/manager.py&quot;, line 81, in &lt;lambda&gt;
    firstresult=hook.spec.opts.get(&quot;firstresult&quot;) if hook.spec else False,
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/pluggy/callers.py&quot;, line 203, in _multicall
    gen.send(outcome)
  File &quot;/Users/huishow/PycharmProjects/new_crm_poium/conftest.py&quot;, line 260, in pytest_runtest_makereport
    capture_screenshot(case_name)
  File &quot;/Users/huishow/PycharmProjects/new_crm_poium/conftest.py&quot;, line 307, in capture_screenshot
    driver.save_screenshot(image_dir)
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py&quot;, line 1055, in save_screenshot
    return self.get_screenshot_as_file(filename)
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py&quot;, line 1032, in get_screenshot_as_file
    png = self.get_screenshot_as_png()
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py&quot;, line 1064, in get_screenshot_as_png
    return base64.b64decode(self.get_screenshot_as_base64().encode(&apos;ascii&apos;))
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py&quot;, line 1074, in get_screenshot_as_base64
    return self.execute(Command.SCREENSHOT)[&apos;value&apos;]
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/selenium/webdriver/remote/webdriver.py&quot;, line 321, in execute
    self.error_handler.check_response(response)
  File &quot;/Users/huishow/venv/lib/python3.7/site-packages/selenium/webdriver/remote/errorhandler.py&quot;, line 242, in check_response
    raise exception_class(message, screen, stacktrace)
selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed
from unknown error: web view not found
  (Session info: chrome=76.0.3809.100)</error></testcase></testsuite>